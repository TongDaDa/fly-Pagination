{"dependencies":[],"generated":{"js":"\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n//分页器\n(function (w, d) {\n\n  var Pagination;\n\n  w.Pagination = Pagination = function Pagination(options) {\n    var _this2 = this;\n\n    if (Object.prototype.toString.call(options) !== \"[object Object]\") {\n      console.error(\"options type must be Object\");return;\n    }\n\n    function foo() {};\n\n    //配置参数\n    this._containerElement = document.querySelector('.pagination'); //页码容器\n    this._pageSize = 10; //一页展示多少\n    this._pageNum = 1; //当前页数(默认为1)\n    this._total = 0; //总条数\n    this._showListPages = 5; //列表中最少展示几个数字标签页码.\n    this._skipPageNum = 5; //快速翻页时，每次翻多少.\n    this._mode = 'ends'; //模式，使用文字上一页下一页或者按钮\n\n    this._onChange = foo;\n    this._onTest = foo; //改变页数时用于外部验证.\n\n    var __CONFIG_OPTIONS__ = [\"containerElement\", \"pageSize\", \"pageNum\", \"total\", \"showListPages\", \"onChange\", \"onTest\", \"skipPageNum\", \"mode\"];\n\n    //绑定类型验证\n    this.bindOptionTypes(__CONFIG_OPTIONS__);\n\n    //生成容器\n    this.ul_list = addClass(document.createElement('UL'), 'fly-pagination-list');\n    this.div_container = addClass(document.createElement('DIV'), \"fly-pagination-wrap\");\n    this.div_container.appendChild(this.ul_list);\n    this.__pagesNum = Math.ceil(this._total / this._pageSize); //根据total应显示多少页数.\n\n    // 更新选项\n    this.updateOption(options);\n\n    var skipPageClick = function skipPageClick(pageNum) {\n      this.updatePageNum(pageNum);\n    };\n\n    var _calcFlanksPageNumber = this.calcFlanksPageNumbers(),\n        _calcFlanksPageNumber2 = _slicedToArray(_calcFlanksPageNumber, 2),\n        left = _calcFlanksPageNumber2[0],\n        right = _calcFlanksPageNumber2[1];\n\n    //初始更新pages列表\n\n\n    this.updateViewPageList(left, right);\n\n    //不可更改内置方法.\n    var innerFunction = [\"updateOption\", \"bianOptionTypes\", \"initTagElement\", \"calcFlanksPageNumbers\", \"updatePageNum\", \"skipPageNum\"];\n\n    innerFunction.forEach(function (funcName) {\n      Object.defineProperty(Object.getPrototypeOf(_this2), funcName, {\n        writeable: false,\n        configurable: false,\n        enmerable: false\n      });\n    });\n\n    //返回外部接口\n    return function (options) {\n      _this2.updateOption(options);\n\n      var _calcFlanksPageNumber3 = _this2.calcFlanksPageNumbers(),\n          _calcFlanksPageNumber4 = _slicedToArray(_calcFlanksPageNumber3, 2),\n          left = _calcFlanksPageNumber4[0],\n          right = _calcFlanksPageNumber4[1];\n\n      _this2.updateViewPageList(left, right);\n    };\n  };\n\n  /**\n   *  注册设置参数的 options 函数.\n   *  @param1 {object} 参数列表\n   *  @param2 {function} 回调 @param1 err  @param2 options\n   *  @return null.\n   *\n   *  note :  持续更新类中的状态\n   */\n  Pagination.prototype.updateOption = function (options) {\n    for (var key in options) {\n      if (this.hasOwnProperty(key)) this[key] = options[key];\n    };\n  };\n\n  /**\n   * @param {Object} 需要绑定的options\n   * @return Boolean\n   * \n   * note : 负责验证options类型 , 绑定 set属性存取器 属性验证\n   */\n  Pagination.prototype.bindOptionTypes = function (OPTIONS) {\n\n    var _this = this;\n\n    var OPTIONS_TYPES = {\n      containerElement: function containerElement(value) {\n        //如果是对象必须是dom元素\n        //如果是选择器(限制 id | class)，在当前页面中必须是必须是唯一的.\n        _this[\"_containerElement\"] = value;\n      },\n      pageSize: function pageSize(value) {\n        // testParamTypes(Number,value,\"fly-pagination pageSize is not safa valu, will be use default pageSize 10\",()=>{\n        //      _this[\"_pageSize\"] = value; \n        // });\n        _this[\"_pageSize\"] = value;\n      },\n      pageNum: function pageNum(value) {\n        _this[\"_pageNum\"] = value;\n      },\n      total: function total(value) {\n        _this[\"_total\"] = value;\n      },\n      onChange: function onChange(value) {\n        _this[\"_onChange\"] = value;\n      },\n      onTest: function onTest(value) {\n        _this[\"_onTest\"] = value;\n      },\n      skipPageNum: function skipPageNum(value) {\n        _this[\"_skipPageNum\"] = value;\n      },\n      showListPages: function showListPages(value) {\n        _this[\"_showListPages\"] = value;\n      },\n      mode: function mode(value) {\n        _this['_mode'] = value;\n      }\n    };\n\n    for (var i = 0; i < OPTIONS.length; i++) {\n      Object.defineProperty(this, OPTIONS[i], {\n        set: OPTIONS_TYPES[OPTIONS[i]]\n      });\n    }\n  };\n\n  /**\n   * 初始化固定标签 上一页，下一页，输入框.\n   */\n  Pagination.prototype.initTagElement = function () {\n    var _this3 = this;\n\n    var skipPageNum = this._skipPageNum;\n    var pagesNum = Math.ceil(this._total / this._pageSize);\n    var topElement = this.initElement(this.makeLiElement(this._mode === 'text' ? \"上一页\" : 1), 'number');\n    var nextElement = this.initElement(this.makeLiElement(this._mode === 'text' ? \"下一页\" : pagesNum), 'number');\n    var superTopElement = this.initElement(this.makeLiElement(''), \"fly-super-up\");\n    var superNextElement = this.initElement(this.makeLiElement(''), \"fly-super-down\");\n\n    topElement.__TYPE__ = 'topElement';\n    nextElement.__TYPE__ = 'nextElement';\n    superTopElement.__TYPE__ = 'superTopElement';\n    superNextElement.__TYPE__ = 'superNextElement';\n\n    if (this._mode === 'ends') {\n      topElement.KEY = 1;\n      nextElement.KEY = Math.ceil(this._total / this._pageSize);\n    }\n\n    topElement.addEventListener('click', function () {\n      if (_this3._mode === 'ends') {\n        _this3.updatePageNum(1);\n        return;\n      }\n      _this3.updatePageNum(_this3._pageNum - 1);\n    });\n\n    nextElement.addEventListener('click', function () {\n      if (_this3._mode === 'ends') {\n        _this3.updatePageNum(pagesNum);\n      }\n      _this3.updatePageNum(_this3._pageNum + 1);\n    });\n\n    superTopElement.addEventListener('click', function () {\n      _this3.updatePageNum(_this3._pageNum - skipPageNum);\n    });\n\n    superNextElement.addEventListener('click', function () {\n      _this3.updatePageNum(_this3._pageNum + skipPageNum);\n    });\n\n    return {\n      topElement: topElement,\n      nextElement: nextElement,\n      superTopElement: superTopElement,\n      superNextElement: superNextElement\n    };\n  };\n\n  /**\n   * 初始化dom元素，添加其类名.\n   *\n   * @param ele {HTML_DOM} 需要进行初始化的 Element\n   * @param {string} 不同type不同初始规则.\n   * @returns {HTML_DOM} 经过初始化之后的 Dom 元素.\n   */\n  Pagination.prototype.initElement = function (ele, type) {\n    var CLASSNAMES = [\"fly-page-item\"];\n    if (type === \"number\") {\n      CLASSNAMES.push(\"fly-page-number\");\n    } else if (type === \"top\") {\n      CLASSNAMES.push(\"fly-page-top\");\n    } else if (type === \"next\") {\n      CLASSNAMES.push(\"fly-page-next\");\n    } else {\n      CLASSNAMES.push(type);\n    }\n    ele.className = ele.className + CLASSNAMES.join(\" \").trim();\n    return ele;\n  };\n\n  /**\n   * 用于更新pageNum 即展示的页数(过程性方法).\n   * @param pageNum {Number} 需要更新到的页数.\n   * @return {undefined}\n   */\n  Pagination.prototype.updatePageNum = function (pageNum) {\n    var _this4 = this;\n\n    var test = true,\n        len = void 0,\n        leftBoundary = void 0,\n        rightBoundary = void 0;\n\n    var maxPagesNumber = Math.ceil(this._total / this._pageSize);\n\n    if (this._onTest) {\n      test = !(this._onTest(pageNum, this._pageSize) === false);\n    };\n\n    var conditions = [typeof pageNum === \"number\", //传入参数必须为number\n    test, //外部验证必须通过.\n    pageNum !== this._pageNum //重复点击标签不触发\n    ];\n\n    len = conditions.length;\n\n    while (len--) {\n      if (!conditions[len]) {\n        return;\n      }\n    };\n\n    if (pageNum < 1) {\n      pageNum = 1;\n    };\n\n    if (pageNum > maxPagesNumber) {\n      pageNum = maxPagesNumber;\n    };\n\n    this._pageNum = pageNum;\n\n    this._onChange(this._pageNum, this._pageSize);\n\n    var _calcFlanksPageNumber5 = this.calcFlanksPageNumbers();\n\n    var _calcFlanksPageNumber6 = _slicedToArray(_calcFlanksPageNumber5, 2);\n\n    leftBoundary = _calcFlanksPageNumber6[0];\n    rightBoundary = _calcFlanksPageNumber6[1];\n\n\n    var isHideTopPage = this._pageNum < this._skipPageNum;\n    var isHideNextPage = this._pageNum > maxPagesNumber - 3;\n\n    this.updateViewPageList(leftBoundary, rightBoundary, function (item) {\n      if (_this4._mode === 'ends') {\n        if (item.__TYPE__ === 'superTopElement' && isHideTopPage || item.__TYPE__ === 'superNextElement' && isHideNextPage) {\n          return false;\n        }\n      }\n      return true;\n    });\n  };\n\n  /**\n   * 根据动态值showListPages 计算左右两侧页码.\n   * \n   * @param showListAveragePages {number} 平均两边放多少个页码.\n   * @return [leftBoundary,rightBoundary] 分别是计算出来的两侧页码数\n   * */\n  Pagination.prototype.calcFlanksPageNumbers = function () {\n\n    var showListPages = this._showListPages; //页码list列表可以展示几个页码标签.\n    var showListAveragePages = Math.ceil((showListPages - 1) / 2); //奇数情况，两边分别为偶数\n    var maxPages = Math.ceil(this._total / this._pageSize); //根据total应显示多少页数.\n    var pageNum = this._pageNum;\n\n    var left = 1,\n        right = showListPages; //默认值为从第一个，到showListPages长度(除自己)\n    var t = true;\n\n    if (pageNum - showListAveragePages <= 0) {\n      t = false;\n    } else if (pageNum + showListAveragePages > maxPages) {\n      left = Math.max(maxPages - showListPages + 1, 1);right = maxPages;\n      t = false;\n    }\n\n    if (t) {\n      right = pageNum + showListAveragePages;\n      left = pageNum - showListAveragePages;\n    }\n\n    //只有在偶数的情况下才会出现大于 ， viewPagesList 显示,重新计算\n    if (right - (left - 1) > showListPages) {\n      var avergae = showListPages / 2;\n      left = Math.max(pageNum - avergae, 1);\n      right = pageNum + avergae - 1;\n    }\n\n    //右侧值大于真实页数时,取最小\n    return [left, Math.min(right, maxPages)];\n  };\n\n  /**\n   *  更新显示的list，只负责渲染，不负责逻辑(过程性方法).\n   *\n   *  @param start {Number}  从哪个页码开始.\n   *  @param end {Number} 到哪个页码结束.\n   *  @return {undefined}\n   */\n  Pagination.prototype.updateViewPageList = function () {\n    var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var end = arguments[1];\n    var isAdd = arguments[2];\n\n\n    end = end || this._showListPages;\n\n    var domFragment = document.createDocumentFragment();\n\n    var pageContainer = this._containerElement,\n        ul = this.ul_list,\n        container = this.div_container;\n\n    var bodyPagesNumbers = this.createBodyNumberPages(start, end);\n\n    var _initTagElement = this.initTagElement(),\n        topElement = _initTagElement.topElement,\n        nextElement = _initTagElement.nextElement,\n        superTopElement = _initTagElement.superTopElement,\n        superNextElement = _initTagElement.superNextElement;\n\n    while (ul.firstChild) {\n      ul.removeChild(ul.firstChild);\n    }\n\n    var queueEle = [topElement, superTopElement].concat(_toConsumableArray(bodyPagesNumbers), [superNextElement, nextElement]);\n\n    for (var i = 0; i < queueEle.length; i++) {\n      var item = queueEle[i];\n      if (isAdd && isAdd(item) || isAdd == null) {\n        if (item.KEY && item.KEY === this._pageNum) {\n          addClass(item, \"active\");\n        }\n        domFragment.appendChild(item);\n      }\n    }\n\n    ul.appendChild(domFragment);\n    container.appendChild(ul);\n    pageContainer.appendChild(container);\n  };\n\n  /**\n   * 用于渲染中间数字性页码.\n   * \n   * @param start 开始的页数.\n   * @param needTotal 结束的页数.\n   * @return {Array} DOM数组\n   */\n  Pagination.prototype.createBodyNumberPages = function (start, needTotal) {\n    var _this5 = this;\n\n    var HTMLDom = [];\n\n    if (this._mode === 'ends') {\n      if (needTotal + 1 <= Math.ceil(this._total / this._pageSize)) {\n        needTotal += 1;\n      } else {}\n    }\n\n    var _loop = function _loop(i) {\n\n      if (_this5._mode === 'ends' && (i === 1 || i === needTotal)) return \"continue\";\n\n      var ele = _this5.makeLiElement(i);\n\n      _this5.initElement(ele, \"number\");\n\n      ele.KEY = i;\n\n      Object.defineProperty(ele, \"KEY\", {\n        configurable: false,\n        writable: false,\n        enumerable: false\n      });\n\n      ele.addEventListener('click', function () {\n        _this5.updatePageNum(i);\n      });\n\n      HTMLDom.push(ele);\n    };\n\n    for (var i = start; i <= needTotal; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    };\n\n    return HTMLDom;\n  };\n\n  /**\n   * 创建 <li> <a><a/> </li>\n   * @return Element\n   */\n  Pagination.prototype.makeLiElement = function (innerHTML) {\n    var li = d.createElement('LI');\n    var a = d.createElement('A');\n    a.innerHTML = innerHTML;\n    li.setAttribute('title', innerHTML);\n    li.appendChild(a);\n    return li;\n  };\n\n  //classlist\n  function classList(element) {\n    return element && \" \" + element.className + \" \";\n  }\n\n  //hasClass\n  function hasClass(element, cls) {\n\n    var className = classList(element);\n\n    return className.indexOf(cls) >= 0;\n  }\n\n  //add class\n  function addClass(element, cls) {\n    var oldList = classList(element),\n        newList = oldList + cls;\n    if (hasClass(element, cls)) return;\n    element.className = newList.trim();\n    return element;\n  }\n\n  //remove class\n  function removeClass(element, cls) {\n\n    var comCls = typeof element === \"string\" ? element : classList(element),\n        newList;\n\n    if (!hasClass(element, cls)) return;\n\n    newList = comCls.replace(\" \" + cls + \" \", \" \");\n\n    element.className = newList.trim();\n  }\n})(window, document);"},"hash":"33d6d6309e23b07a25d7b285b6a4280b"}